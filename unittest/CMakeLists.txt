#
# Copyright (c) 2015-2024 CNRS INRIA
# Copyright (c) 2015 Wandercraft, 86 rue de Paris 91400 Orsay, France.
#

# --- MACROS ------------------------------------------------------------------
# --- MACROS ------------------------------------------------------------------
# --- MACROS ------------------------------------------------------------------

MACRO(ADD_TEST_CFLAGS target flag)
  GET_CPP_TEST_NAME(${target} ${CMAKE_CURRENT_SOURCE_DIR} test_name)
  SET_PROPERTY(TARGET ${test_name} APPEND_STRING PROPERTY COMPILE_FLAGS " ${flag}")
  UNSET(test_name)
ENDMACRO()

FUNCTION(GET_CPP_TEST_NAME name src_dir full_test_name)
  STRING(REPLACE "${PINOCCHIO_UNIT_TEST_DIR}" "" prefix_name "${src_dir}")
  STRING(REGEX REPLACE "[/]" "-" prefix_name "${prefix_name}-")

  SET(${full_test_name} "test-cpp${prefix_name}${name}" PARENT_SCOPE)
ENDFUNCTION()

SET(PINOCCHIO_UNIT_TEST_DIR ${CMAKE_CURRENT_SOURCE_DIR})

FUNCTION(ADD_PINOCCHIO_UNIT_TEST name)
  SET(options HEADER_ONLY PARSERS EXTRA COLLISION)
  SET(oneValueArgs)
  SET(multiValueArgs PACKAGES)
  CMAKE_PARSE_ARGUMENTS(unit_test "${options}" "${oneValueArgs}"
    "${multiValueArgs}" ${ARGN})

  SET(PKGS ${unit_test_PACKAGES})

  GET_CPP_TEST_NAME(${name} ${CMAKE_CURRENT_SOURCE_DIR} TEST_NAME)
  ADD_UNIT_TEST(${TEST_NAME} ${name}.cpp)

  # There is no RPATH in Windows, then we must use the PATH to find the DLL
  IF(WIN32)
    STRING(REPLACE ";" "\\\;" _PATH "$ENV{PATH}")
    SET(ENV_VARIABLES "PATH=${_PATH}\\\;${CMAKE_BINARY_DIR}/src\\\;${CMAKE_BINARY_DIR}/bindings/python/pinocchio")
    SET_TESTS_PROPERTIES(${TEST_NAME} PROPERTIES ENVIRONMENT "${ENV_VARIABLES}")
  ENDIF()

  SET_TARGET_PROPERTIES(${TEST_NAME} PROPERTIES LINKER_LANGUAGE CXX)
  TARGET_INCLUDE_DIRECTORIES(${TEST_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

  ADD_TEST_CFLAGS(${name} "-DBOOST_TEST_DYN_LINK")
  SET(MODULE_NAME "${name}Test")
  STRING(REGEX REPLACE "-" "_" MODULE_NAME ${MODULE_NAME})
  ADD_TEST_CFLAGS(${name} "-DBOOST_TEST_MODULE=${MODULE_NAME}")
  ADD_TEST_CFLAGS(${name} "-DPINOCCHIO_MODEL_DIR=\\\\\"${PINOCCHIO_MODEL_DIR}\\\\\"")
  IF(WIN32)
    ADD_TEST_CFLAGS(${name} "-DNOMINMAX -D_USE_MATH_DEFINES")
  ENDIF()

  IF(NOT unit_test_HEADER_ONLY)
    TARGET_LINK_LIBRARIES(${TEST_NAME} PUBLIC ${PROJECT_NAME}_default)
  ENDIF()

  IF(unit_test_PARSERS)
    TARGET_LINK_LIBRARIES(${TEST_NAME} PUBLIC ${PROJECT_NAME}_parsers)
  ENDIF()

  IF(unit_test_COLLISION)
    TARGET_LINK_LIBRARIES(${TEST_NAME} PUBLIC ${PROJECT_NAME}_collision)
  ENDIF()

  IF(unit_test_EXTRA)
    TARGET_LINK_LIBRARIES(${TEST_NAME} PUBLIC ${PROJECT_NAME}_extra)
  ENDIF()

  MODERNIZE_TARGET_LINK_LIBRARIES(${TEST_NAME} SCOPE PRIVATE
    TARGETS Boost::unit_test_framework
    LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})

  IF(PKGS)
    TARGET_LINK_LIBRARIES(${TEST_NAME} PRIVATE ${PKGS})
  ENDIF()
ENDFUNCTION()

MACRO(ADD_OPTIONAL_COMPILE_DEPENDENCY PKG_CONFIG_STRING)
  _GET_PKG_CONFIG_DEBUG_STRING("${PKG_CONFIG_STRING}" ${ARGN})
  ADD_DEPENDENCY(0 1 ${PKG_CONFIG_STRING} "${PKG_CONFIG_DEBUG_STRING}")
ENDMACRO()

MACRO(ADD_PINOCCHIO_PARALLEL_UNIT_TEST NAME)
  IF(BUILD_WITH_OPENMP_SUPPORT)
    ADD_PINOCCHIO_UNIT_TEST(${ARGV})
    SET(TEST_NAME "test-cpp-${NAME}")
    TARGET_LINK_LIBRARIES(${TEST_NAME} PRIVATE OpenMP::OpenMP_CXX)
  ENDIF()
ENDMACRO()

# Find Boost.UnitTestFramework
FIND_PACKAGE(Boost COMPONENTS unit_test_framework)

# Header only
ADD_PINOCCHIO_UNIT_TEST(macros HEADER_ONLY)

# Math components
ADD_PINOCCHIO_UNIT_TEST(eigen-basic-op)
ADD_PINOCCHIO_UNIT_TEST(eigen-tensor)
ADD_PINOCCHIO_UNIT_TEST(sincos)
ADD_PINOCCHIO_UNIT_TEST(quaternion)
ADD_PINOCCHIO_UNIT_TEST(rpy)
ADD_PINOCCHIO_UNIT_TEST(rotation)
ADD_PINOCCHIO_UNIT_TEST(vector)
ADD_PINOCCHIO_UNIT_TEST(matrix)
ADD_PINOCCHIO_UNIT_TEST(eigenvalues)
ADD_PINOCCHIO_UNIT_TEST(tridiagonal-matrix)
ADD_PINOCCHIO_UNIT_TEST(lanczos-decomposition)
ADD_PINOCCHIO_UNIT_TEST(gram-schmidt-orthonormalisation)

# Derivatives algo
ADD_PINOCCHIO_UNIT_TEST(kinematics-derivatives)
ADD_PINOCCHIO_UNIT_TEST(frames-derivatives)
ADD_PINOCCHIO_UNIT_TEST(rnea-derivatives)
ADD_PINOCCHIO_UNIT_TEST(aba-derivatives)
ADD_PINOCCHIO_UNIT_TEST(centroidal-derivatives)
ADD_PINOCCHIO_UNIT_TEST(center-of-mass-derivatives)
ADD_PINOCCHIO_UNIT_TEST(constrained-dynamics-derivatives)

IF(BUILD_WITH_SDF_SUPPORT)
  ADD_PINOCCHIO_UNIT_TEST(contact-dynamics-derivatives PARSERS)
ELSE()
  ADD_PINOCCHIO_UNIT_TEST(contact-dynamics-derivatives)
ENDIF()
ADD_PINOCCHIO_UNIT_TEST(impulse-dynamics-derivatives)
ADD_PINOCCHIO_UNIT_TEST(rnea-second-order-derivatives)


# Pinocchio features
ADD_PINOCCHIO_UNIT_TEST(spatial)
ADD_PINOCCHIO_UNIT_TEST(symmetric)
ADD_PINOCCHIO_UNIT_TEST(aba)
ADD_PINOCCHIO_PARALLEL_UNIT_TEST(parallel-aba)
ADD_PINOCCHIO_UNIT_TEST(rnea)
ADD_PINOCCHIO_PARALLEL_UNIT_TEST(parallel-rnea)
ADD_PINOCCHIO_UNIT_TEST(crba)
ADD_PINOCCHIO_UNIT_TEST(centroidal)
ADD_PINOCCHIO_UNIT_TEST(com)
ADD_PINOCCHIO_UNIT_TEST(joint-jacobian)
ADD_PINOCCHIO_UNIT_TEST(cholesky)
ADD_PINOCCHIO_UNIT_TEST(constrained-dynamics)
ADD_PINOCCHIO_UNIT_TEST(constraint-variants)
ADD_PINOCCHIO_UNIT_TEST(contact-models)
ADD_PINOCCHIO_UNIT_TEST(contact-dynamics)
ADD_PINOCCHIO_UNIT_TEST(contact-inverse-dynamics)
ADD_PINOCCHIO_UNIT_TEST(closed-loop-dynamics)
ADD_PINOCCHIO_UNIT_TEST(impulse-dynamics)
ADD_PINOCCHIO_UNIT_TEST(sample-models)
ADD_PINOCCHIO_UNIT_TEST(kinematics)
ADD_PINOCCHIO_UNIT_TEST(delassus)
ADD_PINOCCHIO_UNIT_TEST(pv-solver)

ADD_PINOCCHIO_UNIT_TEST(mjcf PARSERS)

IF(BUILD_WITH_URDF_SUPPORT)
  ADD_PINOCCHIO_UNIT_TEST(urdf PARSERS)

  ADD_PINOCCHIO_UNIT_TEST(value PARSERS)
  IF(BUILD_WITH_HPP_FCL_SUPPORT)
    ADD_PINOCCHIO_UNIT_TEST(geometry-object COLLISION)
    ADD_PINOCCHIO_UNIT_TEST(geometry-model PARSERS COLLISION)
    ADD_PINOCCHIO_UNIT_TEST(geometry-algorithms PARSERS COLLISION)
    ADD_PINOCCHIO_UNIT_TEST(broadphase PARSERS COLLISION)
    ADD_PINOCCHIO_UNIT_TEST(tree-broadphase PARSERS COLLISION)
    ADD_PINOCCHIO_PARALLEL_UNIT_TEST(parallel-geometry PARSERS COLLISION)
    ADD_PINOCCHIO_UNIT_TEST(srdf PARSERS COLLISION)
  ENDIF()
ENDIF()

IF(BUILD_WITH_SDF_SUPPORT)
  ADD_PINOCCHIO_UNIT_TEST(sdf PARSERS)
ENDIF()

IF(BUILD_WITH_EXTRA_SUPPORT)
  ADD_PINOCCHIO_UNIT_TEST(reachable-workspace PARSERS EXTRA)
ENDIF()

IF(BUILD_WITH_LIBPYTHON)
  ADD_PINOCCHIO_UNIT_TEST(python_parser PACKAGES Python3::Python)
  TARGET_INCLUDE_DIRECTORIES(test-cpp-python_parser SYSTEM PUBLIC ${PYTHON_INCLUDE_DIRS})

  IF(BUILD_WITH_OPENMP_SUPPORT AND NOT LINK_PYTHON_INTERFACE_TO_OPENMP)
    TARGET_LINK_LIBRARIES(test-cpp-python_parser PRIVATE ${OpenMP_CXX_LIBRARIES})
  ENDIF()

  TARGET_LINK_LIBRARIES(test-cpp-python_parser PUBLIC ${PYWRAP}_default)
  TARGET_LINK_LIBRARIES(test-cpp-python_parser PUBLIC ${PYTHON_LIBRARIES})
  GET_TEST_PROPERTY(test-cpp-python_parser ENVIRONMENT ENV_VARIABLES)
  IF(WIN32)
    GET_FILENAME_COMPONENT(PYTHONHOME ${PYTHON_EXECUTABLE} PATH)
    LIST(APPEND ENV_VARIABLES "PYTHONHOME=${PYTHONHOME}")
    UNSET(PYTHONHOME)
    STRING(REPLACE ";" "\\\;" _PYTHONPATH "$ENV{PYTHONPATH}")
    LIST(APPEND ENV_VARIABLES "PYTHONPATH=${_PYTHONPATH}\\\;${CMAKE_BINARY_DIR}/bindings/python")
  ELSE()
    LIST(APPEND ENV_VARIABLES "PYTHONPATH=$ENV{PYTHONPATH}:${CMAKE_BINARY_DIR}/bindings/python")
  ENDIF()
  IF(APPLE)
    LIST(APPEND ENV_VARIABLES "LD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}")
    LIST(APPEND ENV_VARIABLES "DYLD_LIBRARY_PATH=$ENV{DYLD_LIBRARY_PATH}")
  ENDIF()
  SET_TESTS_PROPERTIES(test-cpp-python_parser PROPERTIES ENVIRONMENT "${ENV_VARIABLES}")
  ADD_SUBDIRECTORY(python)
ENDIF()

# Test over the joints
ADD_PINOCCHIO_UNIT_TEST(all-joints)
ADD_PINOCCHIO_UNIT_TEST(joint-revolute)
ADD_PINOCCHIO_UNIT_TEST(joint-prismatic)
ADD_PINOCCHIO_UNIT_TEST(joint-planar)
ADD_PINOCCHIO_UNIT_TEST(joint-free-flyer)
ADD_PINOCCHIO_UNIT_TEST(joint-spherical)
ADD_PINOCCHIO_UNIT_TEST(joint-translation)
ADD_PINOCCHIO_UNIT_TEST(joint-generic)
ADD_PINOCCHIO_UNIT_TEST(joint-composite)
ADD_PINOCCHIO_UNIT_TEST(joint-mimic)
ADD_PINOCCHIO_UNIT_TEST(joint-helical)
ADD_PINOCCHIO_UNIT_TEST(joint-universal)

# Main corpus
ADD_PINOCCHIO_UNIT_TEST(model)
ADD_PINOCCHIO_UNIT_TEST(data)
ADD_PINOCCHIO_UNIT_TEST(joint-motion-subspace)
ADD_PINOCCHIO_UNIT_TEST(compute-all-terms)
ADD_PINOCCHIO_UNIT_TEST(energy)
ADD_PINOCCHIO_UNIT_TEST(frames)
IF(NOT MSVC AND NOT MSVC_VERSION)
  ADD_PINOCCHIO_UNIT_TEST(joint-configurations)
ENDIF()
ADD_PINOCCHIO_UNIT_TEST(explog)
ADD_PINOCCHIO_UNIT_TEST(finite-differences)
ADD_PINOCCHIO_UNIT_TEST(visitor)
ADD_PINOCCHIO_UNIT_TEST(algo-check)

ADD_PINOCCHIO_UNIT_TEST(liegroups)
ADD_PINOCCHIO_UNIT_TEST(cartesian-product-liegroups)
ADD_PINOCCHIO_UNIT_TEST(regressor)
ADD_PINOCCHIO_UNIT_TEST(version)
ADD_PINOCCHIO_UNIT_TEST(copy)
ADD_PINOCCHIO_UNIT_TEST(contact-cholesky)
ADD_PINOCCHIO_UNIT_TEST(classic-acceleration)
ADD_PINOCCHIO_UNIT_TEST(coulomb-friction-cone)

# Serialization
MAKE_DIRECTORY("${CMAKE_CURRENT_BINARY_DIR}/serialization-data")
ADD_PINOCCHIO_UNIT_TEST(serialization)
ADD_TEST_CFLAGS(serialization "-DTEST_SERIALIZATION_FOLDER=\\\\\"${CMAKE_CURRENT_BINARY_DIR}/serialization-data\\\\\"")
ADD_PINOCCHIO_UNIT_TEST(csv)
ADD_TEST_CFLAGS(csv "-DTEST_SERIALIZATION_FOLDER=\\\\\"${CMAKE_CURRENT_BINARY_DIR}/serialization-data\\\\\"")

ADD_SUBDIRECTORY(algorithm)

# Multiprecision arithmetic
IF(BUILD_ADVANCED_TESTING)
  ADD_PINOCCHIO_UNIT_TEST(multiprecision)

  ADD_OPTIONAL_COMPILE_DEPENDENCY(gmp)
  ADD_OPTIONAL_COMPILE_DEPENDENCY(mpfr)

  IF(MPFR_FOUND)
    ADD_PINOCCHIO_UNIT_TEST(multiprecision-mpfr PACKAGES mpfr gmp)
  ENDIF()
ENDIF()

IF(BUILD_WITH_AUTODIFF_SUPPORT)
  ADD_SUBDIRECTORY(cppad)
ENDIF()

IF(BUILD_WITH_CODEGEN_SUPPORT)
  ADD_SUBDIRECTORY(cppadcg)
ENDIF()

IF(BUILD_WITH_CASADI_SUPPORT)
  ADD_SUBDIRECTORY(casadi)
ENDIF()
