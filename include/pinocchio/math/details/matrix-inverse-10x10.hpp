//
// Copyright (c) 2025 INRIA
//

#ifndef __pinocchio_math_details_matrix_inversion_10x10_hpp__
#define __pinocchio_math_details_matrix_inversion_10x10_hpp__

#include "pinocchio/math/matrix.hpp"

namespace pinocchio
{
  namespace internal
  {
    template<>
    struct MatrixInversionCodeGeneratedImpl<10>
    {
      template<typename M1, typename M2>
      static EIGEN_STRONG_INLINE void
      run(const Eigen::MatrixBase<M1> & matrix, const Eigen::MatrixBase<M2> & matrix_inverse_)
      {
        typedef typename M1::Scalar Scalar;

        assert(is_symmetric(matrix));

        const auto & input_vec = matrix.reshaped();
        auto & matrix_inverse = matrix_inverse_.const_cast_derived();
        auto output_vec = matrix_inverse.reshaped();

        Scalar a000, a001, a002, a003, a004, a005, a006, a007, a008, a009, a010, a011;
        Scalar a012, a013, a014, a015, a016, a017, a018, a019, a020, a021, a022, a023;
        Scalar a024, a025, a026, a027, a028, a029, a030, a031, a032, a033, a034, a035;
        Scalar a036, a037, a038, a039, a040, a041, a042, a043, a044, a045, a046, a047;
        Scalar a048, a049, a050, a051, a052, a053, a054, a055, a056, a057, a058, a059;
        Scalar a060, a061, a062, a063, a064, a065, a066, a067, a068, a069, a070, a071;
        Scalar a072, a073, a074, a075, a076, a077, a078, a079, a080, a081, a082, a083;
        Scalar a084, a085, a086, a087, a088, a089, a090, a091, a092, a093, a094, a095;
        Scalar a096, a097, a098, a099, a100, a101;
        a000 = input_vec[0];
        a001 = input_vec[11];
        a002 = input_vec[22];
        a003 = input_vec[33];
        a004 = input_vec[44];
        a005 = input_vec[55];
        a006 = input_vec[66];
        a007 = input_vec[77];
        a008 = input_vec[88];
        a009 = input_vec[99];
        a010 = input_vec[98];
        a010 = (a010 / a009);
        a011 = math::square(a010);
        a011 = (a009 * a011);
        a008 = (a008 - a011);
        a011 = input_vec[87];
        a012 = input_vec[97];
        a013 = (a012 * a010);
        a011 = (a011 - a013);
        a011 = (a011 / a008);
        a013 = math::square(a011);
        a013 = (a008 * a013);
        a012 = (a012 / a009);
        a014 = math::square(a012);
        a014 = (a009 * a014);
        a013 = (a013 + a014);
        a007 = (a007 - a013);
        a013 = input_vec[76];
        a014 = input_vec[86];
        a015 = input_vec[96];
        a016 = (a015 * a010);
        a014 = (a014 - a016);
        a016 = (a014 * a011);
        a017 = (a015 * a012);
        a016 = (a016 + a017);
        a013 = (a013 - a016);
        a013 = (a013 / a007);
        a016 = math::square(a013);
        a016 = (a007 * a016);
        a014 = (a014 / a008);
        a017 = math::square(a014);
        a017 = (a008 * a017);
        a016 = (a016 + a017);
        a015 = (a015 / a009);
        a017 = math::square(a015);
        a017 = (a009 * a017);
        a016 = (a016 + a017);
        a006 = (a006 - a016);
        a016 = input_vec[65];
        a017 = input_vec[75];
        a018 = input_vec[85];
        a019 = input_vec[95];
        a020 = (a019 * a010);
        a018 = (a018 - a020);
        a020 = (a018 * a011);
        a021 = (a019 * a012);
        a020 = (a020 + a021);
        a017 = (a017 - a020);
        a020 = (a017 * a013);
        a021 = (a018 * a014);
        a020 = (a020 + a021);
        a021 = (a019 * a015);
        a020 = (a020 + a021);
        a016 = (a016 - a020);
        a016 = (a016 / a006);
        a020 = math::square(a016);
        a020 = (a006 * a020);
        a017 = (a017 / a007);
        a021 = math::square(a017);
        a021 = (a007 * a021);
        a020 = (a020 + a021);
        a018 = (a018 / a008);
        a021 = math::square(a018);
        a021 = (a008 * a021);
        a020 = (a020 + a021);
        a019 = (a019 / a009);
        a021 = math::square(a019);
        a021 = (a009 * a021);
        a020 = (a020 + a021);
        a005 = (a005 - a020);
        a020 = input_vec[54];
        a021 = input_vec[64];
        a022 = input_vec[74];
        a023 = input_vec[84];
        a024 = input_vec[94];
        a025 = (a024 * a010);
        a023 = (a023 - a025);
        a025 = (a023 * a011);
        a026 = (a024 * a012);
        a025 = (a025 + a026);
        a022 = (a022 - a025);
        a025 = (a022 * a013);
        a026 = (a023 * a014);
        a025 = (a025 + a026);
        a026 = (a024 * a015);
        a025 = (a025 + a026);
        a021 = (a021 - a025);
        a025 = (a021 * a016);
        a026 = (a022 * a017);
        a025 = (a025 + a026);
        a026 = (a023 * a018);
        a025 = (a025 + a026);
        a026 = (a024 * a019);
        a025 = (a025 + a026);
        a020 = (a020 - a025);
        a020 = (a020 / a005);
        a025 = math::square(a020);
        a025 = (a005 * a025);
        a021 = (a021 / a006);
        a026 = math::square(a021);
        a026 = (a006 * a026);
        a025 = (a025 + a026);
        a022 = (a022 / a007);
        a026 = math::square(a022);
        a026 = (a007 * a026);
        a025 = (a025 + a026);
        a023 = (a023 / a008);
        a026 = math::square(a023);
        a026 = (a008 * a026);
        a025 = (a025 + a026);
        a024 = (a024 / a009);
        a026 = math::square(a024);
        a026 = (a009 * a026);
        a025 = (a025 + a026);
        a004 = (a004 - a025);
        a025 = input_vec[43];
        a026 = input_vec[53];
        a027 = input_vec[63];
        a028 = input_vec[73];
        a029 = input_vec[83];
        a030 = input_vec[93];
        a031 = (a030 * a010);
        a029 = (a029 - a031);
        a031 = (a029 * a011);
        a032 = (a030 * a012);
        a031 = (a031 + a032);
        a028 = (a028 - a031);
        a031 = (a028 * a013);
        a032 = (a029 * a014);
        a031 = (a031 + a032);
        a032 = (a030 * a015);
        a031 = (a031 + a032);
        a027 = (a027 - a031);
        a031 = (a027 * a016);
        a032 = (a028 * a017);
        a031 = (a031 + a032);
        a032 = (a029 * a018);
        a031 = (a031 + a032);
        a032 = (a030 * a019);
        a031 = (a031 + a032);
        a026 = (a026 - a031);
        a031 = (a026 * a020);
        a032 = (a027 * a021);
        a031 = (a031 + a032);
        a032 = (a028 * a022);
        a031 = (a031 + a032);
        a032 = (a029 * a023);
        a031 = (a031 + a032);
        a032 = (a030 * a024);
        a031 = (a031 + a032);
        a025 = (a025 - a031);
        a025 = (a025 / a004);
        a031 = math::square(a025);
        a031 = (a004 * a031);
        a026 = (a026 / a005);
        a032 = math::square(a026);
        a032 = (a005 * a032);
        a031 = (a031 + a032);
        a027 = (a027 / a006);
        a032 = math::square(a027);
        a032 = (a006 * a032);
        a031 = (a031 + a032);
        a028 = (a028 / a007);
        a032 = math::square(a028);
        a032 = (a007 * a032);
        a031 = (a031 + a032);
        a029 = (a029 / a008);
        a032 = math::square(a029);
        a032 = (a008 * a032);
        a031 = (a031 + a032);
        a030 = (a030 / a009);
        a032 = math::square(a030);
        a032 = (a009 * a032);
        a031 = (a031 + a032);
        a003 = (a003 - a031);
        a031 = input_vec[32];
        a032 = input_vec[42];
        a033 = input_vec[52];
        a034 = input_vec[62];
        a035 = input_vec[72];
        a036 = input_vec[82];
        a037 = input_vec[92];
        a038 = (a037 * a010);
        a036 = (a036 - a038);
        a038 = (a036 * a011);
        a039 = (a037 * a012);
        a038 = (a038 + a039);
        a035 = (a035 - a038);
        a038 = (a035 * a013);
        a039 = (a036 * a014);
        a038 = (a038 + a039);
        a039 = (a037 * a015);
        a038 = (a038 + a039);
        a034 = (a034 - a038);
        a038 = (a034 * a016);
        a039 = (a035 * a017);
        a038 = (a038 + a039);
        a039 = (a036 * a018);
        a038 = (a038 + a039);
        a039 = (a037 * a019);
        a038 = (a038 + a039);
        a033 = (a033 - a038);
        a038 = (a033 * a020);
        a039 = (a034 * a021);
        a038 = (a038 + a039);
        a039 = (a035 * a022);
        a038 = (a038 + a039);
        a039 = (a036 * a023);
        a038 = (a038 + a039);
        a039 = (a037 * a024);
        a038 = (a038 + a039);
        a032 = (a032 - a038);
        a038 = (a032 * a025);
        a039 = (a033 * a026);
        a038 = (a038 + a039);
        a039 = (a034 * a027);
        a038 = (a038 + a039);
        a039 = (a035 * a028);
        a038 = (a038 + a039);
        a039 = (a036 * a029);
        a038 = (a038 + a039);
        a039 = (a037 * a030);
        a038 = (a038 + a039);
        a031 = (a031 - a038);
        a031 = (a031 / a003);
        a038 = math::square(a031);
        a038 = (a003 * a038);
        a032 = (a032 / a004);
        a039 = math::square(a032);
        a039 = (a004 * a039);
        a038 = (a038 + a039);
        a033 = (a033 / a005);
        a039 = math::square(a033);
        a039 = (a005 * a039);
        a038 = (a038 + a039);
        a034 = (a034 / a006);
        a039 = math::square(a034);
        a039 = (a006 * a039);
        a038 = (a038 + a039);
        a035 = (a035 / a007);
        a039 = math::square(a035);
        a039 = (a007 * a039);
        a038 = (a038 + a039);
        a036 = (a036 / a008);
        a039 = math::square(a036);
        a039 = (a008 * a039);
        a038 = (a038 + a039);
        a037 = (a037 / a009);
        a039 = math::square(a037);
        a039 = (a009 * a039);
        a038 = (a038 + a039);
        a002 = (a002 - a038);
        a038 = input_vec[21];
        a039 = input_vec[31];
        a040 = input_vec[41];
        a041 = input_vec[51];
        a042 = input_vec[61];
        a043 = input_vec[71];
        a044 = input_vec[81];
        a045 = input_vec[91];
        a046 = (a045 * a010);
        a044 = (a044 - a046);
        a046 = (a044 * a011);
        a047 = (a045 * a012);
        a046 = (a046 + a047);
        a043 = (a043 - a046);
        a046 = (a043 * a013);
        a047 = (a044 * a014);
        a046 = (a046 + a047);
        a047 = (a045 * a015);
        a046 = (a046 + a047);
        a042 = (a042 - a046);
        a046 = (a042 * a016);
        a047 = (a043 * a017);
        a046 = (a046 + a047);
        a047 = (a044 * a018);
        a046 = (a046 + a047);
        a047 = (a045 * a019);
        a046 = (a046 + a047);
        a041 = (a041 - a046);
        a046 = (a041 * a020);
        a047 = (a042 * a021);
        a046 = (a046 + a047);
        a047 = (a043 * a022);
        a046 = (a046 + a047);
        a047 = (a044 * a023);
        a046 = (a046 + a047);
        a047 = (a045 * a024);
        a046 = (a046 + a047);
        a040 = (a040 - a046);
        a046 = (a040 * a025);
        a047 = (a041 * a026);
        a046 = (a046 + a047);
        a047 = (a042 * a027);
        a046 = (a046 + a047);
        a047 = (a043 * a028);
        a046 = (a046 + a047);
        a047 = (a044 * a029);
        a046 = (a046 + a047);
        a047 = (a045 * a030);
        a046 = (a046 + a047);
        a039 = (a039 - a046);
        a046 = (a039 * a031);
        a047 = (a040 * a032);
        a046 = (a046 + a047);
        a047 = (a041 * a033);
        a046 = (a046 + a047);
        a047 = (a042 * a034);
        a046 = (a046 + a047);
        a047 = (a043 * a035);
        a046 = (a046 + a047);
        a047 = (a044 * a036);
        a046 = (a046 + a047);
        a047 = (a045 * a037);
        a046 = (a046 + a047);
        a038 = (a038 - a046);
        a038 = (a038 / a002);
        a046 = math::square(a038);
        a046 = (a002 * a046);
        a039 = (a039 / a003);
        a047 = math::square(a039);
        a047 = (a003 * a047);
        a046 = (a046 + a047);
        a040 = (a040 / a004);
        a047 = math::square(a040);
        a047 = (a004 * a047);
        a046 = (a046 + a047);
        a041 = (a041 / a005);
        a047 = math::square(a041);
        a047 = (a005 * a047);
        a046 = (a046 + a047);
        a042 = (a042 / a006);
        a047 = math::square(a042);
        a047 = (a006 * a047);
        a046 = (a046 + a047);
        a043 = (a043 / a007);
        a047 = math::square(a043);
        a047 = (a007 * a047);
        a046 = (a046 + a047);
        a044 = (a044 / a008);
        a047 = math::square(a044);
        a047 = (a008 * a047);
        a046 = (a046 + a047);
        a045 = (a045 / a009);
        a047 = math::square(a045);
        a047 = (a009 * a047);
        a046 = (a046 + a047);
        a001 = (a001 - a046);
        a046 = input_vec[10];
        a047 = input_vec[20];
        a048 = input_vec[30];
        a049 = input_vec[40];
        a050 = input_vec[50];
        a051 = input_vec[60];
        a052 = input_vec[70];
        a053 = input_vec[80];
        a054 = input_vec[90];
        a055 = (a054 * a010);
        a053 = (a053 - a055);
        a055 = (a053 * a011);
        a056 = (a054 * a012);
        a055 = (a055 + a056);
        a052 = (a052 - a055);
        a055 = (a052 * a013);
        a056 = (a053 * a014);
        a055 = (a055 + a056);
        a056 = (a054 * a015);
        a055 = (a055 + a056);
        a051 = (a051 - a055);
        a055 = (a051 * a016);
        a056 = (a052 * a017);
        a055 = (a055 + a056);
        a056 = (a053 * a018);
        a055 = (a055 + a056);
        a056 = (a054 * a019);
        a055 = (a055 + a056);
        a050 = (a050 - a055);
        a055 = (a050 * a020);
        a056 = (a051 * a021);
        a055 = (a055 + a056);
        a056 = (a052 * a022);
        a055 = (a055 + a056);
        a056 = (a053 * a023);
        a055 = (a055 + a056);
        a056 = (a054 * a024);
        a055 = (a055 + a056);
        a049 = (a049 - a055);
        a055 = (a049 * a025);
        a056 = (a050 * a026);
        a055 = (a055 + a056);
        a056 = (a051 * a027);
        a055 = (a055 + a056);
        a056 = (a052 * a028);
        a055 = (a055 + a056);
        a056 = (a053 * a029);
        a055 = (a055 + a056);
        a056 = (a054 * a030);
        a055 = (a055 + a056);
        a048 = (a048 - a055);
        a055 = (a048 * a031);
        a056 = (a049 * a032);
        a055 = (a055 + a056);
        a056 = (a050 * a033);
        a055 = (a055 + a056);
        a056 = (a051 * a034);
        a055 = (a055 + a056);
        a056 = (a052 * a035);
        a055 = (a055 + a056);
        a056 = (a053 * a036);
        a055 = (a055 + a056);
        a056 = (a054 * a037);
        a055 = (a055 + a056);
        a047 = (a047 - a055);
        a055 = (a047 * a038);
        a056 = (a048 * a039);
        a055 = (a055 + a056);
        a056 = (a049 * a040);
        a055 = (a055 + a056);
        a056 = (a050 * a041);
        a055 = (a055 + a056);
        a056 = (a051 * a042);
        a055 = (a055 + a056);
        a056 = (a052 * a043);
        a055 = (a055 + a056);
        a056 = (a053 * a044);
        a055 = (a055 + a056);
        a056 = (a054 * a045);
        a055 = (a055 + a056);
        a046 = (a046 - a055);
        a046 = (a046 / a001);
        a055 = math::square(a046);
        a055 = (a001 * a055);
        a047 = (a047 / a002);
        a056 = math::square(a047);
        a056 = (a002 * a056);
        a055 = (a055 + a056);
        a048 = (a048 / a003);
        a056 = math::square(a048);
        a056 = (a003 * a056);
        a055 = (a055 + a056);
        a049 = (a049 / a004);
        a056 = math::square(a049);
        a056 = (a004 * a056);
        a055 = (a055 + a056);
        a050 = (a050 / a005);
        a056 = math::square(a050);
        a056 = (a005 * a056);
        a055 = (a055 + a056);
        a051 = (a051 / a006);
        a056 = math::square(a051);
        a056 = (a006 * a056);
        a055 = (a055 + a056);
        a052 = (a052 / a007);
        a056 = math::square(a052);
        a056 = (a007 * a056);
        a055 = (a055 + a056);
        a053 = (a053 / a008);
        a056 = math::square(a053);
        a056 = (a008 * a056);
        a055 = (a055 + a056);
        a054 = (a054 / a009);
        a056 = math::square(a054);
        a056 = (a009 * a056);
        a055 = (a055 + a056);
        a000 = (a000 - a055);
        a055 = (1. / a000);
        output_vec[0] = a055;
        a055 = (a046 / a000);
        a056 = (-a055);
        output_vec[1] = a056;
        a057 = (a046 * a038);
        a057 = (a047 - a057);
        a057 = (a057 / a000);
        a058 = (-a057);
        output_vec[2] = a058;
        a059 = (a038 * a031);
        a059 = (a039 - a059);
        a060 = (a046 * a059);
        a061 = (a047 * a031);
        a060 = (a060 + a061);
        a060 = (a048 - a060);
        a060 = (a060 / a000);
        a061 = (-a060);
        output_vec[3] = a061;
        a062 = (a031 * a025);
        a062 = (a032 - a062);
        a063 = (a038 * a062);
        a064 = (a039 * a025);
        a063 = (a063 + a064);
        a063 = (a040 - a063);
        a064 = (a046 * a063);
        a065 = (a047 * a062);
        a064 = (a064 + a065);
        a065 = (a048 * a025);
        a064 = (a064 + a065);
        a064 = (a049 - a064);
        a064 = (a064 / a000);
        a065 = (-a064);
        output_vec[4] = a065;
        a066 = (a025 * a020);
        a066 = (a026 - a066);
        a067 = (a031 * a066);
        a068 = (a032 * a020);
        a067 = (a067 + a068);
        a067 = (a033 - a067);
        a068 = (a038 * a067);
        a069 = (a039 * a066);
        a068 = (a068 + a069);
        a069 = (a040 * a020);
        a068 = (a068 + a069);
        a068 = (a041 - a068);
        a069 = (a046 * a068);
        a070 = (a047 * a067);
        a069 = (a069 + a070);
        a070 = (a048 * a066);
        a069 = (a069 + a070);
        a070 = (a049 * a020);
        a069 = (a069 + a070);
        a069 = (a050 - a069);
        a069 = (a069 / a000);
        a070 = (-a069);
        output_vec[5] = a070;
        a071 = (a020 * a016);
        a071 = (a021 - a071);
        a072 = (a025 * a071);
        a073 = (a026 * a016);
        a072 = (a072 + a073);
        a072 = (a027 - a072);
        a073 = (a031 * a072);
        a074 = (a032 * a071);
        a073 = (a073 + a074);
        a074 = (a033 * a016);
        a073 = (a073 + a074);
        a073 = (a034 - a073);
        a074 = (a038 * a073);
        a075 = (a039 * a072);
        a074 = (a074 + a075);
        a075 = (a040 * a071);
        a074 = (a074 + a075);
        a075 = (a041 * a016);
        a074 = (a074 + a075);
        a074 = (a042 - a074);
        a075 = (a046 * a074);
        a076 = (a047 * a073);
        a075 = (a075 + a076);
        a076 = (a048 * a072);
        a075 = (a075 + a076);
        a076 = (a049 * a071);
        a075 = (a075 + a076);
        a076 = (a050 * a016);
        a075 = (a075 + a076);
        a075 = (a051 - a075);
        a075 = (a075 / a000);
        a076 = (-a075);
        output_vec[6] = a076;
        a077 = (a016 * a013);
        a077 = (a017 - a077);
        a078 = (a020 * a077);
        a079 = (a021 * a013);
        a078 = (a078 + a079);
        a078 = (a022 - a078);
        a079 = (a025 * a078);
        a080 = (a026 * a077);
        a079 = (a079 + a080);
        a080 = (a027 * a013);
        a079 = (a079 + a080);
        a079 = (a028 - a079);
        a080 = (a031 * a079);
        a081 = (a032 * a078);
        a080 = (a080 + a081);
        a081 = (a033 * a077);
        a080 = (a080 + a081);
        a081 = (a034 * a013);
        a080 = (a080 + a081);
        a080 = (a035 - a080);
        a081 = (a038 * a080);
        a082 = (a039 * a079);
        a081 = (a081 + a082);
        a082 = (a040 * a078);
        a081 = (a081 + a082);
        a082 = (a041 * a077);
        a081 = (a081 + a082);
        a082 = (a042 * a013);
        a081 = (a081 + a082);
        a081 = (a043 - a081);
        a082 = (a046 * a081);
        a083 = (a047 * a080);
        a082 = (a082 + a083);
        a083 = (a048 * a079);
        a082 = (a082 + a083);
        a083 = (a049 * a078);
        a082 = (a082 + a083);
        a083 = (a050 * a077);
        a082 = (a082 + a083);
        a083 = (a051 * a013);
        a082 = (a082 + a083);
        a082 = (a052 - a082);
        a082 = (a082 / a000);
        a083 = (-a082);
        output_vec[7] = a083;
        a084 = (a013 * a011);
        a084 = (a014 - a084);
        a085 = (a016 * a084);
        a086 = (a017 * a011);
        a085 = (a085 + a086);
        a085 = (a018 - a085);
        a086 = (a020 * a085);
        a087 = (a021 * a084);
        a086 = (a086 + a087);
        a087 = (a022 * a011);
        a086 = (a086 + a087);
        a086 = (a023 - a086);
        a087 = (a025 * a086);
        a088 = (a026 * a085);
        a087 = (a087 + a088);
        a088 = (a027 * a084);
        a087 = (a087 + a088);
        a088 = (a028 * a011);
        a087 = (a087 + a088);
        a087 = (a029 - a087);
        a088 = (a031 * a087);
        a089 = (a032 * a086);
        a088 = (a088 + a089);
        a089 = (a033 * a085);
        a088 = (a088 + a089);
        a089 = (a034 * a084);
        a088 = (a088 + a089);
        a089 = (a035 * a011);
        a088 = (a088 + a089);
        a088 = (a036 - a088);
        a089 = (a038 * a088);
        a090 = (a039 * a087);
        a089 = (a089 + a090);
        a090 = (a040 * a086);
        a089 = (a089 + a090);
        a090 = (a041 * a085);
        a089 = (a089 + a090);
        a090 = (a042 * a084);
        a089 = (a089 + a090);
        a090 = (a043 * a011);
        a089 = (a089 + a090);
        a089 = (a044 - a089);
        a090 = (a046 * a089);
        a091 = (a047 * a088);
        a090 = (a090 + a091);
        a091 = (a048 * a087);
        a090 = (a090 + a091);
        a091 = (a049 * a086);
        a090 = (a090 + a091);
        a091 = (a050 * a085);
        a090 = (a090 + a091);
        a091 = (a051 * a084);
        a090 = (a090 + a091);
        a091 = (a052 * a011);
        a090 = (a090 + a091);
        a090 = (a053 - a090);
        a090 = (a090 / a000);
        a091 = (-a090);
        output_vec[8] = a091;
        a092 = (a011 * a010);
        a092 = (a012 - a092);
        a093 = (a013 * a092);
        a094 = (a014 * a010);
        a093 = (a093 + a094);
        a093 = (a015 - a093);
        a094 = (a016 * a093);
        a095 = (a017 * a092);
        a094 = (a094 + a095);
        a095 = (a018 * a010);
        a094 = (a094 + a095);
        a094 = (a019 - a094);
        a095 = (a020 * a094);
        a096 = (a021 * a093);
        a095 = (a095 + a096);
        a096 = (a022 * a092);
        a095 = (a095 + a096);
        a096 = (a023 * a010);
        a095 = (a095 + a096);
        a095 = (a024 - a095);
        a096 = (a025 * a095);
        a097 = (a026 * a094);
        a096 = (a096 + a097);
        a097 = (a027 * a093);
        a096 = (a096 + a097);
        a097 = (a028 * a092);
        a096 = (a096 + a097);
        a097 = (a029 * a010);
        a096 = (a096 + a097);
        a096 = (a030 - a096);
        a097 = (a031 * a096);
        a098 = (a032 * a095);
        a097 = (a097 + a098);
        a098 = (a033 * a094);
        a097 = (a097 + a098);
        a098 = (a034 * a093);
        a097 = (a097 + a098);
        a098 = (a035 * a092);
        a097 = (a097 + a098);
        a098 = (a036 * a010);
        a097 = (a097 + a098);
        a097 = (a037 - a097);
        a098 = (a038 * a097);
        a099 = (a039 * a096);
        a098 = (a098 + a099);
        a099 = (a040 * a095);
        a098 = (a098 + a099);
        a099 = (a041 * a094);
        a098 = (a098 + a099);
        a099 = (a042 * a093);
        a098 = (a098 + a099);
        a099 = (a043 * a092);
        a098 = (a098 + a099);
        a099 = (a044 * a010);
        a098 = (a098 + a099);
        a098 = (a045 - a098);
        a099 = (a046 * a098);
        a100 = (a047 * a097);
        a099 = (a099 + a100);
        a100 = (a048 * a096);
        a099 = (a099 + a100);
        a100 = (a049 * a095);
        a099 = (a099 + a100);
        a100 = (a050 * a094);
        a099 = (a099 + a100);
        a100 = (a051 * a093);
        a099 = (a099 + a100);
        a100 = (a052 * a092);
        a099 = (a099 + a100);
        a100 = (a053 * a010);
        a099 = (a099 + a100);
        a099 = (a054 - a099);
        a099 = (a099 / a000);
        a000 = (-a099);
        output_vec[9] = a000;
        output_vec[10] = a056;
        a056 = (1. / a001);
        a055 = (a046 * a055);
        a056 = (a056 + a055);
        output_vec[11] = a056;
        a056 = (a046 * a057);
        a055 = (a038 / a001);
        a056 = (a056 - a055);
        output_vec[12] = a056;
        a055 = (a046 * a060);
        a059 = (a059 / a001);
        a055 = (a055 - a059);
        output_vec[13] = a055;
        a059 = (a046 * a064);
        a063 = (a063 / a001);
        a059 = (a059 - a063);
        output_vec[14] = a059;
        a063 = (a046 * a069);
        a068 = (a068 / a001);
        a063 = (a063 - a068);
        output_vec[15] = a063;
        a068 = (a046 * a075);
        a074 = (a074 / a001);
        a068 = (a068 - a074);
        output_vec[16] = a068;
        a074 = (a046 * a082);
        a081 = (a081 / a001);
        a074 = (a074 - a081);
        output_vec[17] = a074;
        a081 = (a046 * a090);
        a089 = (a089 / a001);
        a081 = (a081 - a089);
        output_vec[18] = a081;
        a046 = (a046 * a099);
        a098 = (a098 / a001);
        a046 = (a046 - a098);
        output_vec[19] = a046;
        output_vec[20] = a058;
        output_vec[21] = a056;
        a058 = (1. / a002);
        a056 = (a038 * a056);
        a057 = (a047 * a057);
        a056 = (a056 - a057);
        a058 = (a058 - a056);
        output_vec[22] = a058;
        a058 = (a031 / a002);
        a056 = (a038 * a055);
        a057 = (a047 * a060);
        a056 = (a056 - a057);
        a058 = (a058 + a056);
        a056 = (-a058);
        output_vec[23] = a056;
        a062 = (a062 / a002);
        a057 = (a038 * a059);
        a098 = (a047 * a064);
        a057 = (a057 - a098);
        a062 = (a062 + a057);
        a057 = (-a062);
        output_vec[24] = a057;
        a067 = (a067 / a002);
        a098 = (a038 * a063);
        a001 = (a047 * a069);
        a098 = (a098 - a001);
        a067 = (a067 + a098);
        a098 = (-a067);
        output_vec[25] = a098;
        a073 = (a073 / a002);
        a001 = (a038 * a068);
        a089 = (a047 * a075);
        a001 = (a001 - a089);
        a073 = (a073 + a001);
        a001 = (-a073);
        output_vec[26] = a001;
        a080 = (a080 / a002);
        a089 = (a038 * a074);
        a100 = (a047 * a082);
        a089 = (a089 - a100);
        a080 = (a080 + a089);
        a089 = (-a080);
        output_vec[27] = a089;
        a088 = (a088 / a002);
        a100 = (a038 * a081);
        a101 = (a047 * a090);
        a100 = (a100 - a101);
        a088 = (a088 + a100);
        a100 = (-a088);
        output_vec[28] = a100;
        a097 = (a097 / a002);
        a038 = (a038 * a046);
        a047 = (a047 * a099);
        a038 = (a038 - a047);
        a097 = (a097 + a038);
        a038 = (-a097);
        output_vec[29] = a038;
        output_vec[30] = a061;
        output_vec[31] = a055;
        output_vec[32] = a056;
        a056 = (1. / a003);
        a055 = (a039 * a055);
        a060 = (a048 * a060);
        a055 = (a055 - a060);
        a058 = (a031 * a058);
        a055 = (a055 - a058);
        a056 = (a056 - a055);
        output_vec[33] = a056;
        a056 = (a025 / a003);
        a055 = (a039 * a059);
        a058 = (a048 * a064);
        a055 = (a055 - a058);
        a058 = (a031 * a062);
        a055 = (a055 - a058);
        a056 = (a056 + a055);
        a055 = (-a056);
        output_vec[34] = a055;
        a066 = (a066 / a003);
        a058 = (a039 * a063);
        a060 = (a048 * a069);
        a058 = (a058 - a060);
        a060 = (a031 * a067);
        a058 = (a058 - a060);
        a066 = (a066 + a058);
        a058 = (-a066);
        output_vec[35] = a058;
        a072 = (a072 / a003);
        a060 = (a039 * a068);
        a061 = (a048 * a075);
        a060 = (a060 - a061);
        a061 = (a031 * a073);
        a060 = (a060 - a061);
        a072 = (a072 + a060);
        a060 = (-a072);
        output_vec[36] = a060;
        a079 = (a079 / a003);
        a061 = (a039 * a074);
        a047 = (a048 * a082);
        a061 = (a061 - a047);
        a047 = (a031 * a080);
        a061 = (a061 - a047);
        a079 = (a079 + a061);
        a061 = (-a079);
        output_vec[37] = a061;
        a087 = (a087 / a003);
        a047 = (a039 * a081);
        a002 = (a048 * a090);
        a047 = (a047 - a002);
        a002 = (a031 * a088);
        a047 = (a047 - a002);
        a087 = (a087 + a047);
        a047 = (-a087);
        output_vec[38] = a047;
        a096 = (a096 / a003);
        a039 = (a039 * a046);
        a048 = (a048 * a099);
        a039 = (a039 - a048);
        a031 = (a031 * a097);
        a039 = (a039 - a031);
        a096 = (a096 + a039);
        a039 = (-a096);
        output_vec[39] = a039;
        output_vec[40] = a065;
        output_vec[41] = a059;
        output_vec[42] = a057;
        output_vec[43] = a055;
        a055 = (1. / a004);
        a059 = (a040 * a059);
        a064 = (a049 * a064);
        a059 = (a059 - a064);
        a062 = (a032 * a062);
        a059 = (a059 - a062);
        a056 = (a025 * a056);
        a059 = (a059 - a056);
        a055 = (a055 - a059);
        output_vec[44] = a055;
        a055 = (a020 / a004);
        a059 = (a040 * a063);
        a056 = (a049 * a069);
        a059 = (a059 - a056);
        a056 = (a032 * a067);
        a059 = (a059 - a056);
        a056 = (a025 * a066);
        a059 = (a059 - a056);
        a055 = (a055 + a059);
        a059 = (-a055);
        output_vec[45] = a059;
        a071 = (a071 / a004);
        a056 = (a040 * a068);
        a062 = (a049 * a075);
        a056 = (a056 - a062);
        a062 = (a032 * a073);
        a056 = (a056 - a062);
        a062 = (a025 * a072);
        a056 = (a056 - a062);
        a071 = (a071 + a056);
        a056 = (-a071);
        output_vec[46] = a056;
        a078 = (a078 / a004);
        a062 = (a040 * a074);
        a064 = (a049 * a082);
        a062 = (a062 - a064);
        a064 = (a032 * a080);
        a062 = (a062 - a064);
        a064 = (a025 * a079);
        a062 = (a062 - a064);
        a078 = (a078 + a062);
        a062 = (-a078);
        output_vec[47] = a062;
        a086 = (a086 / a004);
        a064 = (a040 * a081);
        a057 = (a049 * a090);
        a064 = (a064 - a057);
        a057 = (a032 * a088);
        a064 = (a064 - a057);
        a057 = (a025 * a087);
        a064 = (a064 - a057);
        a086 = (a086 + a064);
        a064 = (-a086);
        output_vec[48] = a064;
        a095 = (a095 / a004);
        a040 = (a040 * a046);
        a049 = (a049 * a099);
        a040 = (a040 - a049);
        a032 = (a032 * a097);
        a040 = (a040 - a032);
        a025 = (a025 * a096);
        a040 = (a040 - a025);
        a095 = (a095 + a040);
        a040 = (-a095);
        output_vec[49] = a040;
        output_vec[50] = a070;
        output_vec[51] = a063;
        output_vec[52] = a098;
        output_vec[53] = a058;
        output_vec[54] = a059;
        a059 = (1. / a005);
        a063 = (a041 * a063);
        a069 = (a050 * a069);
        a063 = (a063 - a069);
        a067 = (a033 * a067);
        a063 = (a063 - a067);
        a066 = (a026 * a066);
        a063 = (a063 - a066);
        a055 = (a020 * a055);
        a063 = (a063 - a055);
        a059 = (a059 - a063);
        output_vec[55] = a059;
        a059 = (a016 / a005);
        a063 = (a041 * a068);
        a055 = (a050 * a075);
        a063 = (a063 - a055);
        a055 = (a033 * a073);
        a063 = (a063 - a055);
        a055 = (a026 * a072);
        a063 = (a063 - a055);
        a055 = (a020 * a071);
        a063 = (a063 - a055);
        a059 = (a059 + a063);
        a063 = (-a059);
        output_vec[56] = a063;
        a077 = (a077 / a005);
        a055 = (a041 * a074);
        a066 = (a050 * a082);
        a055 = (a055 - a066);
        a066 = (a033 * a080);
        a055 = (a055 - a066);
        a066 = (a026 * a079);
        a055 = (a055 - a066);
        a066 = (a020 * a078);
        a055 = (a055 - a066);
        a077 = (a077 + a055);
        a055 = (-a077);
        output_vec[57] = a055;
        a085 = (a085 / a005);
        a066 = (a041 * a081);
        a067 = (a050 * a090);
        a066 = (a066 - a067);
        a067 = (a033 * a088);
        a066 = (a066 - a067);
        a067 = (a026 * a087);
        a066 = (a066 - a067);
        a067 = (a020 * a086);
        a066 = (a066 - a067);
        a085 = (a085 + a066);
        a066 = (-a085);
        output_vec[58] = a066;
        a094 = (a094 / a005);
        a041 = (a041 * a046);
        a050 = (a050 * a099);
        a041 = (a041 - a050);
        a033 = (a033 * a097);
        a041 = (a041 - a033);
        a026 = (a026 * a096);
        a041 = (a041 - a026);
        a020 = (a020 * a095);
        a041 = (a041 - a020);
        a094 = (a094 + a041);
        a041 = (-a094);
        output_vec[59] = a041;
        output_vec[60] = a076;
        output_vec[61] = a068;
        output_vec[62] = a001;
        output_vec[63] = a060;
        output_vec[64] = a056;
        output_vec[65] = a063;
        a063 = (1. / a006);
        a068 = (a042 * a068);
        a075 = (a051 * a075);
        a068 = (a068 - a075);
        a073 = (a034 * a073);
        a068 = (a068 - a073);
        a072 = (a027 * a072);
        a068 = (a068 - a072);
        a071 = (a021 * a071);
        a068 = (a068 - a071);
        a059 = (a016 * a059);
        a068 = (a068 - a059);
        a063 = (a063 - a068);
        output_vec[66] = a063;
        a063 = (a013 / a006);
        a068 = (a042 * a074);
        a059 = (a051 * a082);
        a068 = (a068 - a059);
        a059 = (a034 * a080);
        a068 = (a068 - a059);
        a059 = (a027 * a079);
        a068 = (a068 - a059);
        a059 = (a021 * a078);
        a068 = (a068 - a059);
        a059 = (a016 * a077);
        a068 = (a068 - a059);
        a063 = (a063 + a068);
        a068 = (-a063);
        output_vec[67] = a068;
        a084 = (a084 / a006);
        a059 = (a042 * a081);
        a071 = (a051 * a090);
        a059 = (a059 - a071);
        a071 = (a034 * a088);
        a059 = (a059 - a071);
        a071 = (a027 * a087);
        a059 = (a059 - a071);
        a071 = (a021 * a086);
        a059 = (a059 - a071);
        a071 = (a016 * a085);
        a059 = (a059 - a071);
        a084 = (a084 + a059);
        a059 = (-a084);
        output_vec[68] = a059;
        a093 = (a093 / a006);
        a042 = (a042 * a046);
        a051 = (a051 * a099);
        a042 = (a042 - a051);
        a034 = (a034 * a097);
        a042 = (a042 - a034);
        a027 = (a027 * a096);
        a042 = (a042 - a027);
        a021 = (a021 * a095);
        a042 = (a042 - a021);
        a016 = (a016 * a094);
        a042 = (a042 - a016);
        a093 = (a093 + a042);
        a042 = (-a093);
        output_vec[69] = a042;
        output_vec[70] = a083;
        output_vec[71] = a074;
        output_vec[72] = a089;
        output_vec[73] = a061;
        output_vec[74] = a062;
        output_vec[75] = a055;
        output_vec[76] = a068;
        a068 = (1. / a007);
        a074 = (a043 * a074);
        a082 = (a052 * a082);
        a074 = (a074 - a082);
        a080 = (a035 * a080);
        a074 = (a074 - a080);
        a079 = (a028 * a079);
        a074 = (a074 - a079);
        a078 = (a022 * a078);
        a074 = (a074 - a078);
        a077 = (a017 * a077);
        a074 = (a074 - a077);
        a063 = (a013 * a063);
        a074 = (a074 - a063);
        a068 = (a068 - a074);
        output_vec[77] = a068;
        a068 = (a011 / a007);
        a074 = (a043 * a081);
        a063 = (a052 * a090);
        a074 = (a074 - a063);
        a063 = (a035 * a088);
        a074 = (a074 - a063);
        a063 = (a028 * a087);
        a074 = (a074 - a063);
        a063 = (a022 * a086);
        a074 = (a074 - a063);
        a063 = (a017 * a085);
        a074 = (a074 - a063);
        a063 = (a013 * a084);
        a074 = (a074 - a063);
        a068 = (a068 + a074);
        a074 = (-a068);
        output_vec[78] = a074;
        a092 = (a092 / a007);
        a043 = (a043 * a046);
        a052 = (a052 * a099);
        a043 = (a043 - a052);
        a035 = (a035 * a097);
        a043 = (a043 - a035);
        a028 = (a028 * a096);
        a043 = (a043 - a028);
        a022 = (a022 * a095);
        a043 = (a043 - a022);
        a017 = (a017 * a094);
        a043 = (a043 - a017);
        a013 = (a013 * a093);
        a043 = (a043 - a013);
        a092 = (a092 + a043);
        a043 = (-a092);
        output_vec[79] = a043;
        output_vec[80] = a091;
        output_vec[81] = a081;
        output_vec[82] = a100;
        output_vec[83] = a047;
        output_vec[84] = a064;
        output_vec[85] = a066;
        output_vec[86] = a059;
        output_vec[87] = a074;
        a074 = (1. / a008);
        a081 = (a044 * a081);
        a090 = (a053 * a090);
        a081 = (a081 - a090);
        a088 = (a036 * a088);
        a081 = (a081 - a088);
        a087 = (a029 * a087);
        a081 = (a081 - a087);
        a086 = (a023 * a086);
        a081 = (a081 - a086);
        a085 = (a018 * a085);
        a081 = (a081 - a085);
        a084 = (a014 * a084);
        a081 = (a081 - a084);
        a068 = (a011 * a068);
        a081 = (a081 - a068);
        a074 = (a074 - a081);
        output_vec[88] = a074;
        a008 = (a010 / a008);
        a044 = (a044 * a046);
        a053 = (a053 * a099);
        a044 = (a044 - a053);
        a036 = (a036 * a097);
        a044 = (a044 - a036);
        a029 = (a029 * a096);
        a044 = (a044 - a029);
        a023 = (a023 * a095);
        a044 = (a044 - a023);
        a018 = (a018 * a094);
        a044 = (a044 - a018);
        a014 = (a014 * a093);
        a044 = (a044 - a014);
        a011 = (a011 * a092);
        a044 = (a044 - a011);
        a008 = (a008 + a044);
        a044 = (-a008);
        output_vec[89] = a044;
        output_vec[90] = a000;
        output_vec[91] = a046;
        output_vec[92] = a038;
        output_vec[93] = a039;
        output_vec[94] = a040;
        output_vec[95] = a041;
        output_vec[96] = a042;
        output_vec[97] = a043;
        output_vec[98] = a044;
        a009 = (1. / a009);
        a045 = (a045 * a046);
        a054 = (a054 * a099);
        a045 = (a045 - a054);
        a037 = (a037 * a097);
        a045 = (a045 - a037);
        a030 = (a030 * a096);
        a045 = (a045 - a030);
        a024 = (a024 * a095);
        a045 = (a045 - a024);
        a019 = (a019 * a094);
        a045 = (a045 - a019);
        a015 = (a015 * a093);
        a045 = (a045 - a015);
        a012 = (a012 * a092);
        a045 = (a045 - a012);
        a010 = (a010 * a008);
        a045 = (a045 - a010);
        a009 = (a009 - a045);
        output_vec[99] = a009;
      }
    };
  } // namespace internal
} // namespace pinocchio

#endif // ifndef __pinocchio_math_details_matrix_inversion_10x10_hpp__
