//
// Copyright (c) 2025 INRIA
//

#ifndef __pinocchio_math_details_matrix_inversion_7x7_hpp__
#define __pinocchio_math_details_matrix_inversion_7x7_hpp__

#include "pinocchio/math/matrix.hpp"

namespace pinocchio
{
  namespace internal
  {
    template<>
    struct MatrixInversionCodeGeneratedImpl<7>
    {
      template<typename M1, typename M2>
      static void
      run(const Eigen::MatrixBase<M1> & matrix, const Eigen::MatrixBase<M2> & matrix_inverse_)
      {
        typedef typename M1::Scalar Scalar;

        assert(is_symmetric(matrix));

        const auto & input_vec = matrix.reshaped();
        auto & matrix_inverse = matrix_inverse_.const_cast_derived();
        auto output_vec = matrix_inverse.reshaped();

        Scalar a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11;
        Scalar a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23;
        Scalar a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35;
        Scalar a36, a37, a38, a39, a40, a41, a42, a43, a44, a45, a46, a47;
        Scalar a48, a49;
        a00 = input_vec[0];
        a01 = input_vec[8];
        a02 = input_vec[16];
        a03 = input_vec[24];
        a04 = input_vec[32];
        a05 = input_vec[40];
        a06 = input_vec[48];
        a07 = input_vec[47];
        a07 = (a07 / a06);
        a08 = math::square(a07);
        a08 = (a06 * a08);
        a05 = (a05 - a08);
        a08 = input_vec[39];
        a09 = input_vec[46];
        a10 = (a09 * a07);
        a08 = (a08 - a10);
        a08 = (a08 / a05);
        a10 = math::square(a08);
        a10 = (a05 * a10);
        a09 = (a09 / a06);
        a11 = math::square(a09);
        a11 = (a06 * a11);
        a10 = (a10 + a11);
        a04 = (a04 - a10);
        a10 = input_vec[31];
        a11 = input_vec[38];
        a12 = input_vec[45];
        a13 = (a12 * a07);
        a11 = (a11 - a13);
        a13 = (a11 * a08);
        a14 = (a12 * a09);
        a13 = (a13 + a14);
        a10 = (a10 - a13);
        a10 = (a10 / a04);
        a13 = math::square(a10);
        a13 = (a04 * a13);
        a11 = (a11 / a05);
        a14 = math::square(a11);
        a14 = (a05 * a14);
        a13 = (a13 + a14);
        a12 = (a12 / a06);
        a14 = math::square(a12);
        a14 = (a06 * a14);
        a13 = (a13 + a14);
        a03 = (a03 - a13);
        a13 = input_vec[23];
        a14 = input_vec[30];
        a15 = input_vec[37];
        a16 = input_vec[44];
        a17 = (a16 * a07);
        a15 = (a15 - a17);
        a17 = (a15 * a08);
        a18 = (a16 * a09);
        a17 = (a17 + a18);
        a14 = (a14 - a17);
        a17 = (a14 * a10);
        a18 = (a15 * a11);
        a17 = (a17 + a18);
        a18 = (a16 * a12);
        a17 = (a17 + a18);
        a13 = (a13 - a17);
        a13 = (a13 / a03);
        a17 = math::square(a13);
        a17 = (a03 * a17);
        a14 = (a14 / a04);
        a18 = math::square(a14);
        a18 = (a04 * a18);
        a17 = (a17 + a18);
        a15 = (a15 / a05);
        a18 = math::square(a15);
        a18 = (a05 * a18);
        a17 = (a17 + a18);
        a16 = (a16 / a06);
        a18 = math::square(a16);
        a18 = (a06 * a18);
        a17 = (a17 + a18);
        a02 = (a02 - a17);
        a17 = input_vec[15];
        a18 = input_vec[22];
        a19 = input_vec[29];
        a20 = input_vec[36];
        a21 = input_vec[43];
        a22 = (a21 * a07);
        a20 = (a20 - a22);
        a22 = (a20 * a08);
        a23 = (a21 * a09);
        a22 = (a22 + a23);
        a19 = (a19 - a22);
        a22 = (a19 * a10);
        a23 = (a20 * a11);
        a22 = (a22 + a23);
        a23 = (a21 * a12);
        a22 = (a22 + a23);
        a18 = (a18 - a22);
        a22 = (a18 * a13);
        a23 = (a19 * a14);
        a22 = (a22 + a23);
        a23 = (a20 * a15);
        a22 = (a22 + a23);
        a23 = (a21 * a16);
        a22 = (a22 + a23);
        a17 = (a17 - a22);
        a17 = (a17 / a02);
        a22 = math::square(a17);
        a22 = (a02 * a22);
        a18 = (a18 / a03);
        a23 = math::square(a18);
        a23 = (a03 * a23);
        a22 = (a22 + a23);
        a19 = (a19 / a04);
        a23 = math::square(a19);
        a23 = (a04 * a23);
        a22 = (a22 + a23);
        a20 = (a20 / a05);
        a23 = math::square(a20);
        a23 = (a05 * a23);
        a22 = (a22 + a23);
        a21 = (a21 / a06);
        a23 = math::square(a21);
        a23 = (a06 * a23);
        a22 = (a22 + a23);
        a01 = (a01 - a22);
        a22 = input_vec[7];
        a23 = input_vec[14];
        a24 = input_vec[21];
        a25 = input_vec[28];
        a26 = input_vec[35];
        a27 = input_vec[42];
        a28 = (a27 * a07);
        a26 = (a26 - a28);
        a28 = (a26 * a08);
        a29 = (a27 * a09);
        a28 = (a28 + a29);
        a25 = (a25 - a28);
        a28 = (a25 * a10);
        a29 = (a26 * a11);
        a28 = (a28 + a29);
        a29 = (a27 * a12);
        a28 = (a28 + a29);
        a24 = (a24 - a28);
        a28 = (a24 * a13);
        a29 = (a25 * a14);
        a28 = (a28 + a29);
        a29 = (a26 * a15);
        a28 = (a28 + a29);
        a29 = (a27 * a16);
        a28 = (a28 + a29);
        a23 = (a23 - a28);
        a28 = (a23 * a17);
        a29 = (a24 * a18);
        a28 = (a28 + a29);
        a29 = (a25 * a19);
        a28 = (a28 + a29);
        a29 = (a26 * a20);
        a28 = (a28 + a29);
        a29 = (a27 * a21);
        a28 = (a28 + a29);
        a22 = (a22 - a28);
        a22 = (a22 / a01);
        a28 = math::square(a22);
        a28 = (a01 * a28);
        a23 = (a23 / a02);
        a29 = math::square(a23);
        a29 = (a02 * a29);
        a28 = (a28 + a29);
        a24 = (a24 / a03);
        a29 = math::square(a24);
        a29 = (a03 * a29);
        a28 = (a28 + a29);
        a25 = (a25 / a04);
        a29 = math::square(a25);
        a29 = (a04 * a29);
        a28 = (a28 + a29);
        a26 = (a26 / a05);
        a29 = math::square(a26);
        a29 = (a05 * a29);
        a28 = (a28 + a29);
        a27 = (a27 / a06);
        a29 = math::square(a27);
        a29 = (a06 * a29);
        a28 = (a28 + a29);
        a00 = (a00 - a28);
        a28 = (1. / a00);
        output_vec[0] = a28;
        a28 = (a22 / a00);
        a29 = (-a28);
        output_vec[1] = a29;
        a30 = (a22 * a17);
        a30 = (a23 - a30);
        a30 = (a30 / a00);
        a31 = (-a30);
        output_vec[2] = a31;
        a32 = (a17 * a13);
        a32 = (a18 - a32);
        a33 = (a22 * a32);
        a34 = (a23 * a13);
        a33 = (a33 + a34);
        a33 = (a24 - a33);
        a33 = (a33 / a00);
        a34 = (-a33);
        output_vec[3] = a34;
        a35 = (a13 * a10);
        a35 = (a14 - a35);
        a36 = (a17 * a35);
        a37 = (a18 * a10);
        a36 = (a36 + a37);
        a36 = (a19 - a36);
        a37 = (a22 * a36);
        a38 = (a23 * a35);
        a37 = (a37 + a38);
        a38 = (a24 * a10);
        a37 = (a37 + a38);
        a37 = (a25 - a37);
        a37 = (a37 / a00);
        a38 = (-a37);
        output_vec[4] = a38;
        a39 = (a10 * a08);
        a39 = (a11 - a39);
        a40 = (a13 * a39);
        a41 = (a14 * a08);
        a40 = (a40 + a41);
        a40 = (a15 - a40);
        a41 = (a17 * a40);
        a42 = (a18 * a39);
        a41 = (a41 + a42);
        a42 = (a19 * a08);
        a41 = (a41 + a42);
        a41 = (a20 - a41);
        a42 = (a22 * a41);
        a43 = (a23 * a40);
        a42 = (a42 + a43);
        a43 = (a24 * a39);
        a42 = (a42 + a43);
        a43 = (a25 * a08);
        a42 = (a42 + a43);
        a42 = (a26 - a42);
        a42 = (a42 / a00);
        a43 = (-a42);
        output_vec[5] = a43;
        a44 = (a08 * a07);
        a44 = (a09 - a44);
        a45 = (a10 * a44);
        a46 = (a11 * a07);
        a45 = (a45 + a46);
        a45 = (a12 - a45);
        a46 = (a13 * a45);
        a47 = (a14 * a44);
        a46 = (a46 + a47);
        a47 = (a15 * a07);
        a46 = (a46 + a47);
        a46 = (a16 - a46);
        a47 = (a17 * a46);
        a48 = (a18 * a45);
        a47 = (a47 + a48);
        a48 = (a19 * a44);
        a47 = (a47 + a48);
        a48 = (a20 * a07);
        a47 = (a47 + a48);
        a47 = (a21 - a47);
        a48 = (a22 * a47);
        a49 = (a23 * a46);
        a48 = (a48 + a49);
        a49 = (a24 * a45);
        a48 = (a48 + a49);
        a49 = (a25 * a44);
        a48 = (a48 + a49);
        a49 = (a26 * a07);
        a48 = (a48 + a49);
        a48 = (a27 - a48);
        a48 = (a48 / a00);
        a00 = (-a48);
        output_vec[6] = a00;
        output_vec[7] = a29;
        a29 = (1. / a01);
        a28 = (a22 * a28);
        a29 = (a29 + a28);
        output_vec[8] = a29;
        a29 = (a22 * a30);
        a28 = (a17 / a01);
        a29 = (a29 - a28);
        output_vec[9] = a29;
        a28 = (a22 * a33);
        a32 = (a32 / a01);
        a28 = (a28 - a32);
        output_vec[10] = a28;
        a32 = (a22 * a37);
        a36 = (a36 / a01);
        a32 = (a32 - a36);
        output_vec[11] = a32;
        a36 = (a22 * a42);
        a41 = (a41 / a01);
        a36 = (a36 - a41);
        output_vec[12] = a36;
        a22 = (a22 * a48);
        a47 = (a47 / a01);
        a22 = (a22 - a47);
        output_vec[13] = a22;
        output_vec[14] = a31;
        output_vec[15] = a29;
        a31 = (1. / a02);
        a29 = (a17 * a29);
        a30 = (a23 * a30);
        a29 = (a29 - a30);
        a31 = (a31 - a29);
        output_vec[16] = a31;
        a31 = (a13 / a02);
        a29 = (a17 * a28);
        a30 = (a23 * a33);
        a29 = (a29 - a30);
        a31 = (a31 + a29);
        a29 = (-a31);
        output_vec[17] = a29;
        a35 = (a35 / a02);
        a30 = (a17 * a32);
        a47 = (a23 * a37);
        a30 = (a30 - a47);
        a35 = (a35 + a30);
        a30 = (-a35);
        output_vec[18] = a30;
        a40 = (a40 / a02);
        a47 = (a17 * a36);
        a01 = (a23 * a42);
        a47 = (a47 - a01);
        a40 = (a40 + a47);
        a47 = (-a40);
        output_vec[19] = a47;
        a46 = (a46 / a02);
        a17 = (a17 * a22);
        a23 = (a23 * a48);
        a17 = (a17 - a23);
        a46 = (a46 + a17);
        a17 = (-a46);
        output_vec[20] = a17;
        output_vec[21] = a34;
        output_vec[22] = a28;
        output_vec[23] = a29;
        a29 = (1. / a03);
        a28 = (a18 * a28);
        a33 = (a24 * a33);
        a28 = (a28 - a33);
        a31 = (a13 * a31);
        a28 = (a28 - a31);
        a29 = (a29 - a28);
        output_vec[24] = a29;
        a29 = (a10 / a03);
        a28 = (a18 * a32);
        a31 = (a24 * a37);
        a28 = (a28 - a31);
        a31 = (a13 * a35);
        a28 = (a28 - a31);
        a29 = (a29 + a28);
        a28 = (-a29);
        output_vec[25] = a28;
        a39 = (a39 / a03);
        a31 = (a18 * a36);
        a33 = (a24 * a42);
        a31 = (a31 - a33);
        a33 = (a13 * a40);
        a31 = (a31 - a33);
        a39 = (a39 + a31);
        a31 = (-a39);
        output_vec[26] = a31;
        a45 = (a45 / a03);
        a18 = (a18 * a22);
        a24 = (a24 * a48);
        a18 = (a18 - a24);
        a13 = (a13 * a46);
        a18 = (a18 - a13);
        a45 = (a45 + a18);
        a18 = (-a45);
        output_vec[27] = a18;
        output_vec[28] = a38;
        output_vec[29] = a32;
        output_vec[30] = a30;
        output_vec[31] = a28;
        a28 = (1. / a04);
        a32 = (a19 * a32);
        a37 = (a25 * a37);
        a32 = (a32 - a37);
        a35 = (a14 * a35);
        a32 = (a32 - a35);
        a29 = (a10 * a29);
        a32 = (a32 - a29);
        a28 = (a28 - a32);
        output_vec[32] = a28;
        a28 = (a08 / a04);
        a32 = (a19 * a36);
        a29 = (a25 * a42);
        a32 = (a32 - a29);
        a29 = (a14 * a40);
        a32 = (a32 - a29);
        a29 = (a10 * a39);
        a32 = (a32 - a29);
        a28 = (a28 + a32);
        a32 = (-a28);
        output_vec[33] = a32;
        a44 = (a44 / a04);
        a19 = (a19 * a22);
        a25 = (a25 * a48);
        a19 = (a19 - a25);
        a14 = (a14 * a46);
        a19 = (a19 - a14);
        a10 = (a10 * a45);
        a19 = (a19 - a10);
        a44 = (a44 + a19);
        a19 = (-a44);
        output_vec[34] = a19;
        output_vec[35] = a43;
        output_vec[36] = a36;
        output_vec[37] = a47;
        output_vec[38] = a31;
        output_vec[39] = a32;
        a32 = (1. / a05);
        a36 = (a20 * a36);
        a42 = (a26 * a42);
        a36 = (a36 - a42);
        a40 = (a15 * a40);
        a36 = (a36 - a40);
        a39 = (a11 * a39);
        a36 = (a36 - a39);
        a28 = (a08 * a28);
        a36 = (a36 - a28);
        a32 = (a32 - a36);
        output_vec[40] = a32;
        a05 = (a07 / a05);
        a20 = (a20 * a22);
        a26 = (a26 * a48);
        a20 = (a20 - a26);
        a15 = (a15 * a46);
        a20 = (a20 - a15);
        a11 = (a11 * a45);
        a20 = (a20 - a11);
        a08 = (a08 * a44);
        a20 = (a20 - a08);
        a05 = (a05 + a20);
        a20 = (-a05);
        output_vec[41] = a20;
        output_vec[42] = a00;
        output_vec[43] = a22;
        output_vec[44] = a17;
        output_vec[45] = a18;
        output_vec[46] = a19;
        output_vec[47] = a20;
        a06 = (1. / a06);
        a21 = (a21 * a22);
        a27 = (a27 * a48);
        a21 = (a21 - a27);
        a16 = (a16 * a46);
        a21 = (a21 - a16);
        a12 = (a12 * a45);
        a21 = (a21 - a12);
        a09 = (a09 * a44);
        a21 = (a21 - a09);
        a07 = (a07 * a05);
        a21 = (a21 - a07);
        a06 = (a06 - a21);
        output_vec[48] = a06;
      }
    };
  } // namespace internal
} // namespace pinocchio

#endif // ifndef __pinocchio_math_details_matrix_inversion_7x7_hpp__
