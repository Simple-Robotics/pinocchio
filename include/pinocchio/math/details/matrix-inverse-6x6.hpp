//
// Copyright (c) 2025 INRIA
//

#ifndef __pinocchio_math_details_matrix_inversion_6x6_hpp__
#define __pinocchio_math_details_matrix_inversion_6x6_hpp__

#include "pinocchio/math/matrix.hpp"

namespace pinocchio
{
  namespace internal
  {
    template<>
    struct MatrixInversionCodeGeneratedImpl<6>
    {
      template<typename M1, typename M2>
      static EIGEN_STRONG_INLINE void
      run(const Eigen::MatrixBase<M1> & matrix, const Eigen::MatrixBase<M2> & matrix_inverse_)
      {
        typedef typename M1::Scalar Scalar;

        assert(is_symmetric(matrix));

        const auto & input_vec = matrix.reshaped();
        auto & matrix_inverse = matrix_inverse_.const_cast_derived();
        auto output_vec = matrix_inverse.reshaped();

        Scalar a00, a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11;
        Scalar a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23;
        Scalar a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35;
        Scalar a36, a37, a38, a39, a40, a41;
        a00 = input_vec[0];
        a01 = input_vec[6];
        a02 = input_vec[12];
        a03 = input_vec[18];
        a04 = input_vec[24];
        a05 = input_vec[30];
        a06 = input_vec[35];
        a06 = math::sqrt(a06);
        a05 = (a05 / a06);
        a07 = input_vec[34];
        a07 = (a07 / a06);
        a08 = (a05 * a07);
        a04 = (a04 - a08);
        a08 = input_vec[28];
        a09 = math::square(a07);
        a08 = (a08 - a09);
        a08 = math::sqrt(a08);
        a04 = (a04 / a08);
        a09 = input_vec[27];
        a10 = input_vec[33];
        a10 = (a10 / a06);
        a11 = (a10 * a07);
        a09 = (a09 - a11);
        a09 = (a09 / a08);
        a11 = (a04 * a09);
        a12 = (a05 * a10);
        a11 = (a11 + a12);
        a03 = (a03 - a11);
        a11 = input_vec[21];
        a12 = math::square(a09);
        a13 = math::square(a10);
        a12 = (a12 + a13);
        a11 = (a11 - a12);
        a11 = math::sqrt(a11);
        a03 = (a03 / a11);
        a12 = input_vec[20];
        a13 = input_vec[26];
        a14 = input_vec[32];
        a14 = (a14 / a06);
        a15 = (a14 * a07);
        a13 = (a13 - a15);
        a13 = (a13 / a08);
        a15 = (a13 * a09);
        a16 = (a14 * a10);
        a15 = (a15 + a16);
        a12 = (a12 - a15);
        a12 = (a12 / a11);
        a15 = (a03 * a12);
        a16 = (a04 * a13);
        a15 = (a15 + a16);
        a16 = (a05 * a14);
        a15 = (a15 + a16);
        a02 = (a02 - a15);
        a15 = input_vec[14];
        a16 = math::square(a12);
        a17 = math::square(a13);
        a16 = (a16 + a17);
        a17 = math::square(a14);
        a16 = (a16 + a17);
        a15 = (a15 - a16);
        a15 = math::sqrt(a15);
        a02 = (a02 / a15);
        a16 = input_vec[13];
        a17 = input_vec[19];
        a18 = input_vec[25];
        a19 = input_vec[31];
        a19 = (a19 / a06);
        a20 = (a19 * a07);
        a18 = (a18 - a20);
        a18 = (a18 / a08);
        a20 = (a18 * a09);
        a21 = (a19 * a10);
        a20 = (a20 + a21);
        a17 = (a17 - a20);
        a17 = (a17 / a11);
        a20 = (a17 * a12);
        a21 = (a18 * a13);
        a20 = (a20 + a21);
        a21 = (a19 * a14);
        a20 = (a20 + a21);
        a16 = (a16 - a20);
        a16 = (a16 / a15);
        a20 = (a02 * a16);
        a21 = (a03 * a17);
        a20 = (a20 + a21);
        a21 = (a04 * a18);
        a20 = (a20 + a21);
        a21 = (a05 * a19);
        a20 = (a20 + a21);
        a01 = (a01 - a20);
        a20 = input_vec[7];
        a21 = math::square(a16);
        a22 = math::square(a17);
        a21 = (a21 + a22);
        a22 = math::square(a18);
        a21 = (a21 + a22);
        a22 = math::square(a19);
        a21 = (a21 + a22);
        a20 = (a20 - a21);
        a20 = math::sqrt(a20);
        a01 = (a01 / a20);
        a21 = math::square(a01);
        a22 = math::square(a02);
        a21 = (a21 + a22);
        a22 = math::square(a03);
        a21 = (a21 + a22);
        a22 = math::square(a04);
        a21 = (a21 + a22);
        a22 = math::square(a05);
        a21 = (a21 + a22);
        a00 = (a00 - a21);
        a00 = math::sqrt(a00);
        a21 = (1. / a00);
        a21 = (a21 / a00);
        output_vec[0] = a21;
        a21 = (a01 / a20);
        a21 = (a21 / a00);
        a21 = (a21 / a00);
        a22 = (-a21);
        output_vec[1] = a22;
        a23 = (a02 / a15);
        a24 = (a16 / a15);
        a24 = (a24 / a20);
        a25 = (a01 * a24);
        a23 = (a23 - a25);
        a23 = (a23 / a00);
        a23 = (a23 / a00);
        a25 = (-a23);
        output_vec[2] = a25;
        a26 = (a03 / a11);
        a27 = (a17 / a11);
        a28 = (a12 / a11);
        a28 = (a28 / a15);
        a29 = (a16 * a28);
        a27 = (a27 - a29);
        a27 = (a27 / a20);
        a29 = (a01 * a27);
        a30 = (a02 * a28);
        a29 = (a29 + a30);
        a26 = (a26 - a29);
        a26 = (a26 / a00);
        a26 = (a26 / a00);
        a29 = (-a26);
        output_vec[3] = a29;
        a30 = (a04 / a08);
        a31 = (a18 / a08);
        a32 = (a13 / a08);
        a33 = (a09 / a08);
        a33 = (a33 / a11);
        a34 = (a12 * a33);
        a32 = (a32 - a34);
        a32 = (a32 / a15);
        a34 = (a16 * a32);
        a35 = (a17 * a33);
        a34 = (a34 + a35);
        a31 = (a31 - a34);
        a31 = (a31 / a20);
        a34 = (a01 * a31);
        a35 = (a02 * a32);
        a34 = (a34 + a35);
        a35 = (a03 * a33);
        a34 = (a34 + a35);
        a30 = (a30 - a34);
        a30 = (a30 / a00);
        a30 = (a30 / a00);
        a34 = (-a30);
        output_vec[4] = a34;
        a35 = (a05 / a06);
        a36 = (a19 / a06);
        a37 = (a14 / a06);
        a38 = (a10 / a06);
        a39 = (a07 / a06);
        a39 = (a39 / a08);
        a40 = (a09 * a39);
        a38 = (a38 - a40);
        a38 = (a38 / a11);
        a40 = (a12 * a38);
        a41 = (a13 * a39);
        a40 = (a40 + a41);
        a37 = (a37 - a40);
        a37 = (a37 / a15);
        a40 = (a16 * a37);
        a41 = (a17 * a38);
        a40 = (a40 + a41);
        a41 = (a18 * a39);
        a40 = (a40 + a41);
        a36 = (a36 - a40);
        a36 = (a36 / a20);
        a40 = (a01 * a36);
        a41 = (a02 * a37);
        a40 = (a40 + a41);
        a41 = (a03 * a38);
        a40 = (a40 + a41);
        a41 = (a04 * a39);
        a40 = (a40 + a41);
        a35 = (a35 - a40);
        a35 = (a35 / a00);
        a35 = (a35 / a00);
        a00 = (-a35);
        output_vec[5] = a00;
        output_vec[6] = a22;
        a22 = (1. / a20);
        a21 = (a01 * a21);
        a22 = (a22 + a21);
        a22 = (a22 / a20);
        output_vec[7] = a22;
        a22 = (a01 * a23);
        a22 = (a22 - a24);
        a22 = (a22 / a20);
        output_vec[8] = a22;
        a24 = (a01 * a26);
        a24 = (a24 - a27);
        a24 = (a24 / a20);
        output_vec[9] = a24;
        a27 = (a01 * a30);
        a27 = (a27 - a31);
        a27 = (a27 / a20);
        output_vec[10] = a27;
        a01 = (a01 * a35);
        a01 = (a01 - a36);
        a01 = (a01 / a20);
        output_vec[11] = a01;
        output_vec[12] = a25;
        output_vec[13] = a22;
        a25 = (1. / a15);
        a22 = (a16 * a22);
        a23 = (a02 * a23);
        a22 = (a22 - a23);
        a25 = (a25 - a22);
        a25 = (a25 / a15);
        output_vec[14] = a25;
        a25 = (a16 * a24);
        a22 = (a02 * a26);
        a25 = (a25 - a22);
        a28 = (a28 + a25);
        a28 = (a28 / a15);
        a25 = (-a28);
        output_vec[15] = a25;
        a22 = (a16 * a27);
        a23 = (a02 * a30);
        a22 = (a22 - a23);
        a32 = (a32 + a22);
        a32 = (a32 / a15);
        a22 = (-a32);
        output_vec[16] = a22;
        a16 = (a16 * a01);
        a02 = (a02 * a35);
        a16 = (a16 - a02);
        a37 = (a37 + a16);
        a37 = (a37 / a15);
        a15 = (-a37);
        output_vec[17] = a15;
        output_vec[18] = a29;
        output_vec[19] = a24;
        output_vec[20] = a25;
        a25 = (1. / a11);
        a24 = (a17 * a24);
        a26 = (a03 * a26);
        a24 = (a24 - a26);
        a28 = (a12 * a28);
        a24 = (a24 - a28);
        a25 = (a25 - a24);
        a25 = (a25 / a11);
        output_vec[21] = a25;
        a25 = (a17 * a27);
        a24 = (a03 * a30);
        a25 = (a25 - a24);
        a24 = (a12 * a32);
        a25 = (a25 - a24);
        a33 = (a33 + a25);
        a33 = (a33 / a11);
        a25 = (-a33);
        output_vec[22] = a25;
        a17 = (a17 * a01);
        a03 = (a03 * a35);
        a17 = (a17 - a03);
        a12 = (a12 * a37);
        a17 = (a17 - a12);
        a38 = (a38 + a17);
        a38 = (a38 / a11);
        a11 = (-a38);
        output_vec[23] = a11;
        output_vec[24] = a34;
        output_vec[25] = a27;
        output_vec[26] = a22;
        output_vec[27] = a25;
        a25 = (1. / a08);
        a27 = (a18 * a27);
        a30 = (a04 * a30);
        a27 = (a27 - a30);
        a32 = (a13 * a32);
        a27 = (a27 - a32);
        a33 = (a09 * a33);
        a27 = (a27 - a33);
        a25 = (a25 - a27);
        a25 = (a25 / a08);
        output_vec[28] = a25;
        a18 = (a18 * a01);
        a04 = (a04 * a35);
        a18 = (a18 - a04);
        a13 = (a13 * a37);
        a18 = (a18 - a13);
        a09 = (a09 * a38);
        a18 = (a18 - a09);
        a39 = (a39 + a18);
        a39 = (a39 / a08);
        a08 = (-a39);
        output_vec[29] = a08;
        output_vec[30] = a00;
        output_vec[31] = a01;
        output_vec[32] = a15;
        output_vec[33] = a11;
        output_vec[34] = a08;
        a08 = (1. / a06);
        a19 = (a19 * a01);
        a05 = (a05 * a35);
        a19 = (a19 - a05);
        a14 = (a14 * a37);
        a19 = (a19 - a14);
        a10 = (a10 * a38);
        a19 = (a19 - a10);
        a07 = (a07 * a39);
        a19 = (a19 - a07);
        a08 = (a08 - a19);
        a08 = (a08 / a06);
        output_vec[35] = a08;
      }
    };
  } // namespace internal
} // namespace pinocchio

#endif // ifndef __pinocchio_math_details_matrix_inversion_6x6_hpp__
